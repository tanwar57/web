# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

stages:
- stage: Development_Environment
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - deployment: Deploy_to_Dev
pool:
  vmImage: 'windows-latest'
  environment: 'dev'
  strategy:
      runOnce:
        deploy:
          steps:
          - task: UniversalPackages@0
            inputs:
              command: 'download'
              downloadDirectory: '$(System.DefaultWorkingDirectory)'
              feedsToUse: 'internal'
              vstsFeed: '15737d57-841c-4925-805a-ffeaba2006cc/0ab6ee12-0723-40d4-8936-22e85d9e4f0e'

- stage: Staging_Environment
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'windows-latest'
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Microsoft Partner Network (e189eff3-24f5-4964-87fc-1474f1735e7e)'
              appType: 'webApp'
              WebAppName: ${{ parameters.apps_in_test }}
              packageForLinux: '$(System.ArtifactsDirectory)/drop/*.zip'
            
- stage: Production_Environment
  dependsOn: Build
  condition: succeeded('Build')
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'windows-latest'
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:
          
          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Microsoft Partner Network (e189eff3-24f5-4964-87fc-1474f1735e7e)'
              appType: 'webApp'
              WebAppName: ${{ parameters.apps_in_prod }}
              packageForLinux: '$(System.ArtifactsDirectory)/drop/*.zip'
  